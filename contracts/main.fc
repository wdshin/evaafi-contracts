#pragma version >=0.2.0;
#include "imports/stdlib.fc";
#include "imports/math.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";
#include "src/main-get-methods.fc";
#include "src/main-storage.fc";
#include "src/asset-config-packer.fc";
#include "src/asset-data-packer.fc";
#include "src/utils.fc";

(cell) calculate_user_init_state(slice sender_address) {
  return begin_cell()
    .store_slice(my_address())
    .store_slice(sender_address)
    .store_ref(begin_cell().end_cell())
    .end_cell(); 
}

(slice) calculate_user_address (cell state_init) {
  return begin_cell().store_uint(4, 3)
    .store_int(workchain(), 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() init_user (slice sender_address) impure {
  cell state_init = calculate_user_init_state(sender_address);
  slice to_wallet_address = calculate_user_address(state_init);
 
  var msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(to_wallet_address)
              .store_coins(start_balance)
              .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
              .store_ref(state_init)
              .store_ref(begin_cell().end_cell()); ;; TODO set dict with key:assetaddress and zero values

  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() process_incoming_ton() impure {
  ;; TODO
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();
  var (wc, addr_hash) = parse_std_addr(sender_address);

  if (flags & 1) { ;; note: do we need it?
		throw(0xffff); 
  }

  (cell meta, cell user_contract_code, cell assets_config, int if_active, slice admin, cell asset_data) = storage::load();

  if (in_msg_body.slice_empty?()) { ;; TON incoming (without comment)
    process_incoming_ton();
    return ();
  }

  int op = in_msg_body~load_uint(32);
  if (op == 0) { ;; TON incoming (with comment)
    process_incoming_ton();
  }

  int query_id = in_msg_body~load_uint(64);

  if (op == op::init_master) {
    var (wc, admin_addr_hash) = parse_std_addr(admin);
    throw_unless(103, addr_hash == admin_addr_hash);
    cell new_assets_config = in_msg_body~load_ref();
    cell new_asset_data = in_msg_body~load_ref();
    storage::save(meta, user_contract_code, new_assets_config, if_active, admin, new_asset_data);
    return();
  }
  
  if (op == op::init_user) {
    init_user(sender_address); 
    return();
  }
  
  if (op == op::update_price) {
    cell asset_address = in_msg_body~load_msg_addr();
    var (_, asset_address_hash) = parse_std_addr(asset_address);
    var (asset_config_item, is_asset_existing?) = assets_config.udict_get?(256, asset_address_hash);
    throw_unless(100, is_asset_existing?);
    slice wl_oracle = asset_config_item~load_msg_addr();
    var (wc, oracle_addr_hash) = parse_std_addr(wl_oracle);
    throw_unless(103, addr_hash == oracle_addr_hash);
    var (asset_data_item, _) = asset_data.udict_get?(256, asset_address_hash); ;; ?????!! assets_data ??  / fixed
    int new_price = in_msg_body~load_uint(64);

    var (_, s_rate, b_rate, total_supply_principal, total_borrow_principal, last_accural) = unpack_asset_data(asset_data_item);

    cell updated_asset = pack_asset_data(new_price, s_rate, b_rate, total_supply_principal, total_borrow_principal, now());
    ;; todo need to ask if we need now of we can use old last_accural

    assets_data~dict_set(256, asset_address, updated_asset);
    storage::save(meta, user_contract_code, assets_config, if_active, admin, assets_data);
    return();
  }
  
  if (op == op::update_config) {
    ;;todo update not only asset config but config of entire market (isActive & meta too)
    var (wc, admin_addr_hash) = parse_std_addr(admin);
    throw_unless(103, addr_hash == admin_addr_hash);
    cell new_assets_config = in_msg_body~load_ref();
    storage::save(meta, user_contract_code, new_assets_config, if_active, admin, asset_data);
    return();
  }
  
  if (op == op::withdraw) {
    ;; todo/anyone/to user
  }
  
  if (op == op::transfer_notification) {
    int query_id = in_msg_body~load_uint(64); 
    int coins = in_msg_body~load_coins(); 
    int query_id = in_msg_body~load_uint(64); 
    int from_address = in_msg_body~load_msg_addr(); 
    int jetton_msg_body = in_msg_body~load_msg_addr(); ;; check how we get body here 
    int op_jetton = jetton_msg_body~load_uint(32); 
    int query_id_jetton = jetton_msg_body~load_uint(64); 
    int jetton_token_id = jetton_msg_body~load_uint(32); 
    
    if (op_jetton == op::liquidate) {
      ;; todo/anyone/to user/jetton
    }
    
    if (op_jetton == op::supply) {
      ;; todo/anyone/to user/jetton
    }

    ;; todo bounce user jetton if no op codes / maybe liquidate will be not in transfer_notification
  }
  throw(0xffff); 
}