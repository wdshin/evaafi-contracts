#include "imports/stdlib.fc";
(int) tlen (tuple t) asm "TLEN";

global tuple G1Point;  ;; X Y  
global tuple G2Point; ;; X [a b] Y [a b] 
global tuple P1;
global tuple P2; ;; p2 created [[] []]

(tuple) neg (tuple p) {
  int q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
 
  if ((p.at(0) == 0) & (p.at(1) == 0)){
    return empty_tuple().tpush(0).tpush(0); 
  }

  return empty_tuple().tpush(p.at(0)).tpush(q - (p.at(1) % q));
}

(tuple) addition(tuple p1, tuple p2){
  tuple input = empty_tuple();
 
  input~tpush(p1.at(0)); 
  input~tpush(p2.at(0)); 
  input~tpush(p1.at(1)); 
  input~tpush(p2.at(1)); 
  
  return input; ;; TODO check sol assembly code
}

(tuple) scalar_mul(tuple p, int s) {
  tuple input = empty_tuple();
 
  input~tpush(p.at(0)); 
  input~tpush(p.at(1)); 
  input~tpush(s); 
  
  return input; ;; TODO check sol assembly code

}

(int) pairing(tuple p1, tuple p2) {
  int elements = p1.tlen();
  int inputSize = elements * 6;
  tuple input = empty_tuple();
  int i = 0;
  while (i < elements) {
    input~tpush(p1.at(i).at(0));
    input~tpush(p1.at(i).at(1));
    input~tpush(p2.at(i).at(0).at(0));
    input~tpush(p1.at(i).at(0).at(1));
    input~tpush(p1.at(i).at(1).at(0));
    input~tpush(p1.at(i).at(1).at(1));
    i += 1;
  }
  if(~(input.at(0).null?())) {
      return 1;
  } else {
      return 0;
  }
}

(int) pairingProd2(tuple a1, tuple a2, tuple b1, tuple b2) {
  tuple p1 = empty_tuple();
  tuple p2 = empty_tuple();
  p1~tpush(a1);
  p1~tpush(b1);
  p2~tpush(a2);
  p2~tpush(b2);
  return pairing(p1, p2);
}

(int) pairingProd3(tuple a1, tuple a2, tuple b1, tuple b2, tuple c1, tuple c2) {
  tuple p1 = empty_tuple();
  tuple p2 = empty_tuple();
  p1~tpush(a1);
  p1~tpush(b1);
  p1~tpush(c1);
  p2~tpush(a2);
  p2~tpush(b2);
  p2~tpush(c2);
  return pairing(p1, p2);
}

(int) pairingProd4 (tuple a1, tuple a2, tuple b1, tuple b2, tuple c1, tuple c2, tuple d1, tuple d2) {
  tuple p1 = empty_tuple();
  tuple p2 = empty_tuple();
  p1~tpush(a1);
  p1~tpush(b1);
  p1~tpush(c1);
  p1~tpush(d1);
  p2~tpush(a2);
  p2~tpush(b2);
  p2~tpush(c2);
  p2~tpush(d2);
  return pairing(p1, p2);
}

(int) verify (tuple input, tuple proof) {
  tuple A = empty_tuple();
  tuple B = empty_tuple();
  tuple C = empty_tuple();

  tuple  alfa1 = empty_tuple().tpush(3094828775517550525197566774110614793311731901097309624648333207761785087681).tpush(4973361633682654439731710783777857699866244736970939453813554145386550307527);
 
  tuple beta2 = empty_tuple().tpush(empty_tuple().tpush(13499419113223668937021579779117131850345364653480320000177549271557150717374).tpush(11620659399480838044082293331182144703316076720555750892802148027134195201948))
    .tpush( empty_tuple().tpush(18049605325992875447516611068172788214951498814093605221277443190359492293089).tpush(21521211693595528162713660636185959153067292182652600856396868902929580683072));

  tuple gamma2 = empty_tuple().tpush(empty_tuple().tpush(11559732032986387107991004021392285783925812861821192530917403151452391805634).tpush(10857046999023057135944570762232829481370756359578518086990519993285655852781))
    .tpush(empty_tuple().tpush(4082367875863433681332203403145435568316851327593401208105741076214120093531).tpush(8495653923123431417604973247489272438418190587263600148770280649306958101930));

  tuple delta2 = empty_tuple().tpush(empty_tuple().tpush(21736251588786795834463926996850302823040560050017413579828421666093486115677).tpush(20487729238500761411286865321438208222595651741870518082039990228077672635811))
    .tpush(empty_tuple().tpush(814362991425023327376155205421289762321636824124294100639375450278141916107).tpush(14653638796769091338807292843558027576398633425229200983640835820563515047962));

  tuple IC = empty_tuple().tpush(empty_tuple().tpush(10168363029289562194171815371567707737027915763449537510564144979721400377107).tpush(19959253366839090641122107225335812779308542773818209482652804002231893979800))
    .tpush(empty_tuple().tpush(10521597501512296138789420188089172372732231786163980299150549715518141103662).tpush(3561469230793331133301554911538052267789789467669382491203061043140246987920));

  tuple vk_x = empty_tuple().tpush(0).tpush(0);
  int i = 0;
  while (i < input.tlen()){
    i += 1;
    vk_x = addition(vk_x, scalar_mul(IC.at(i + 1), input.at(i)));
  }
  vk_x = addition(vk_x, IC.at(0));
  if (~(pairingProd4(neg(proof.at(0)), proof.at(1), alfa1, beta2, vk_x, gamma2, proof.at(2), delta2))){
    return 1;
  }
  return 0;
}

(int) verifyProof(tuple a, tuple b, tuple c, tuple input) {
  tuple proof = empty_tuple();
  proof~tpush(a);
  proof~tpush(b);
  proof~tpush(c);
  return verify(input, proof);
}


() recv_internal(slice msg ) {
  G1Point = empty_tuple(); 
  G2Point = empty_tuple(); 
  P1 = empty_tuple().tpush(0).tpush(0);
  P2 = empty_tuple().tpush(empty_tuple().tpush(11559732032986387107991004021392285783925812861821192530917403151452391805634).tpush(10857046999023057135944570762232829481370756359578518086990519993285655852781))
    .tpush(empty_tuple().tpush(4082367875863433681332203403145435568316851327593401208105741076214120093531).tpush(8495653923123431417604973247489272438418190587263600148770280649306958101930));
  tuple a = empty_tuple().tpush(18318973978715769650065150969310216933781539668378626944013683238814643511695).tpush( 650797098457235942289960802251878484913582123285776499572570550417718789454).tpush(1);
  tuple b = empty_tuple().tpush(empty_tuple().tpush(11175267129886208968425745356416949529141593119962817552867989002267329741960).tpush( 17225452801745099451495633848314691648655898296380638189818509783666942816040)).tpush(empty_tuple().tpush(5034041042370137391058432478280010963572227273077602393098741978555554262538).tpush(1722545280174509945149563384831469164865589829638063818981850978366694)).tpush(empty_tuple().tpush(1).tpush(0));
  tuple c = empty_tuple().tpush(13233501970904012353533386111155639825693540752816863777954917446293220507451).tpush(17074607027279043033480838619539383675233979646031633758889475442569975329442).tpush(1);
  tuple input = empty_tuple().tpush(7713112592372404476342535432037683616424591277138491596200192981572885523208);
  int res = verifyProof(a, b, c, input);
  ~dump(res);
}
