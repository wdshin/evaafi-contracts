
_ storage::serializeAssetsConfig(slice admin_address, slice owner_address, slice info, cell borrow, cell lend) impure {
  ;;assetsConfig: [
  ;;  ...,
  ;;  {
  ;;    asset: address,
  ;;    oracle: address,
  ;;    decimals: uint8,
  ;;    collateralFactor: uint16,
  ;;    liquidationThreshold: uint16,
  ;;    liquidationPenalty: uint16,
  ;;    baseBorrowRate: uint64, ;; ? maybe 16
  ;;    borrowRateSLopeLow: uint64,
  ;;    borrowRateSlopeHigh: uint64,
  ;;    supplyRateSlopeLow: uint64,
  ;;    supplyRateSlopeHigh: uint64,
  ;;    targetUtilization: uint64
  ;;  },
  ;;  ...
  ;;]
}

_ storage::serializeAssetsData(slice admin_address, slice owner_address, slice info, cell borrow, cell lend) impure {
  ;;assetsData: [
  ;;  ...,
  ;;  {
  ;;    asset: address,
  ;;    sRate: uint64,
  ;;    bRate: uint64,
  ;;    totalSupply: uint64,
  ;;    totalBorrow: uint64,
  ;;    lastAccural: timestamp
  ;;  },
  ;;  ...
  ;;]
}

_ storage::serializeUsersSupplies(slice admin_address, slice owner_address, slice info, cell borrow, cell lend) impure {
  ;;usersSupplies: [
  ;; ...,
  ;; address(as key): [btcTotalAmount, ethTotalAmount, ...]
  ;; ...
  ;;]
}

_ storage::serializeUsersBorrows(slice admin_address, slice owner_address, slice info, cell borrow, cell lend) impure {
  ;;usersBorrows: [
  ;; ...,
  ;; address(as key): [btcTotalAmount, ethTotalAmount, ...]
  ;; ...
  ;;]
}

_ storage::save(slice admin_address, slice owner_address, slice info, cell borrow, cell lend) impure {
  ;;poolStorage: {
  ;;  config: {
  ;;    assetsConfig: [],
  ;;    ifActive: bool,
  ;;    admin: address
  ;;  },
  ;;  data: {
  ;;    assetsData: [],
  ;;    usersSupplies: [],
  ;;    userBorrows: []
  ;;  }
  ;;}

  cell data = begin_cell()
    .store_ref(
      begin_cell()
        .store_ref(serializedAssetsConfig)
        .store_uint(ifActive)
        .store_address(admin)
      .end_cell())
    .store_ref(
      begin_cell()
        .store_ref(serializedAssetsData)
        .store_ref(serializedUsersSupplies)
        .store_ref(serializedUsersBorrows)
      .end_cell())
  .end_cell();
  set_data(data);
}

;;() storage::load() inline {
;;  slice ds = get_data().begin_parse();
;;  ;; 
;;  
;;}

;;(slice, slice, slice, slice, cell, cell, cell) storage::load_data() inline {
;;        slice ds = get_data().begin_parse();
;;        slice owner_address = ds~load_msg_addr();
;;        slice info = (ds~load_ref()).begin_parse();
;;        cell borrow = ds~load_dict();
;;        cell lend = ds~load_dict();
;;        cell algebra = ds~load_uint(64);
;;        return (owner_address, info~load_msg_addr(), info~load_msg_addr(), info~load_msg_addr(), info~load_msg_addr(), borrow, lend, algebra);
;;}
