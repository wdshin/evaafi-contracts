;;todo protocol_balance_by_token
() storage::save (cell meta, cell user_contract_code, cell asset_config_collection, int if_active, slice admin, cell wallet_to_master, cell asset_dynamics_collection) impure {
  cell data = begin_cell()
    .store_ref(meta) 
    .store_ref(user_contract_code)
    .store_ref(
      begin_cell()
        .store_dict(asset_config_collection)
        .store_int(if_active, 8)
        .store_slice(admin)
        .store_dict(wallet_to_master)
      .end_cell())
    .store_dict(asset_dynamics_collection)
  .end_cell();
  set_data(data);
}

(cell, cell, cell, int, slice, cell, cell) storage::load () inline {
  slice ds = get_data().begin_parse();
  cell meta = ds~load_ref();
  cell user_contract_code = ds~load_ref();
  cell marketConfig = ds~load_ref();
  slice unpacked_marked_config = marketConfig.begin_parse();
  cell asset_config_collection = unpacked_marked_config~load_dict();
  int if_active = unpacked_marked_config~load_int(8);
  slice admin = unpacked_marked_config~load_msg_addr();
  cell wallet_to_master = unpacked_marked_config~load_dict();
  cell asset_dynamics_collection = ds~load_dict();
  return (meta, user_contract_code, asset_config_collection, if_active, admin, wallet_to_master, asset_dynamics_collection);
}
 
