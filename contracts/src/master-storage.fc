;;todo protocol_balance_by_token
() storage::save (cell meta, cell user_contract_code, cell assets_config, int if_active, slice admin, cell wallet_to_master, cell assets_data) impure {
  ~dump(132);
  cell data = begin_cell()
    .store_ref(meta) ;; meta_data 
    .store_ref(user_contract_code) ;; user_contract_code
    .store_ref(
      begin_cell()
        .store_dict(assets_config) ;; assets_config
        .store_uint(if_active, 8) ;; if_active
        .store_slice(admin) ;; admin_address
 ;;       .store_dict(wallet_to_master)
      .end_cell())
    .store_dict(assets_data) ;;assets_data
  .end_cell();
  set_data(data);
}

(cell, cell, cell, int, slice, cell, cell) storage::load () inline {

  slice ds = get_data().begin_parse();
  cell meta = ds~load_ref();
  cell user_contract_code = ds~load_ref();
  cell marketConfig = ds~load_ref();
  slice unpacked_marked_config = marketConfig.begin_parse();
  cell assets_config = unpacked_marked_config~load_dict();
  int if_active = unpacked_marked_config~load_uint(8);
  slice admin = unpacked_marked_config~load_msg_addr();
;;  cell wallet_to_master = unpacked_marked_config~load_dict();

  cell asset_data = ds~load_dict();
  ;;return (meta, user_contract_code, assets_config, if_active, admin, wallet_to_master, asset_data);
  return (meta, user_contract_code, assets_config, if_active, admin, begin_cell().end_cell(), asset_data);
}

