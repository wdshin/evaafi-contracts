cell pack_asset_dynamics(
	int price, int s_rate, int b_rate,
	int total_supply_principal, int total_borrow_principal,
	int last_accural, int token_balance
) {
	return begin_cell()
		.store_price(price)
		.store_sb_rate(s_rate)
		.store_sb_rate(b_rate)
		.store_principal(total_supply_principal)
		.store_principal(total_borrow_principal)
		.store_timestamp(last_accural)
		.store_balance(token_balance)
		.end_cell();
}

(int, int, int, int, int, int, int) unpack_asset_dynamics(slice asset_dynamics) {
~dump(12391723);	
~dump( asset_dynamics);	
	int price = asset_dynamics~load_uint(64);
~dump(1239172388888);	
	int asset_s_rate = asset_dynamics~load_sb_rate();
	int asset_b_rate = asset_dynamics~load_sb_rate();
~dump(12391723);	
	int total_supply_principal = asset_dynamics~load_uint(64); ;; todo encapsulate this part // we dont need load_int here
~dump(12391723);	
	int total_borrow_principal = asset_dynamics~load_uint(64);
~dump(12391723);	
	int last_accural = asset_dynamics~load_timestamp();
~dump(12391723);	
	int token_balance = asset_dynamics~load_balance();
	;; todo make token_balance updates on deposit and withdrawal
~dump(12391723);	
	return (
		price, asset_s_rate,
		asset_b_rate, total_supply_principal,
		total_borrow_principal, last_accural, token_balance
	);
}

;; int asset_dynamics_last_accural(slice asset_dynamics) {
;; 	asset_dynamics~load_msg_addr();
;; 	asset_dynamics~skip_bits(64 * 5); ;; ! Super careful with this stuff, now that it might be different
;; 	return asset_dynamics.preload_uint(64);
;; }

(int, int, int, int, int, int, int) asset_dynamics_collection:get_unpacked(
	cell asset_dynamics_collection, int asset_id
) {
~dump(1999);
	(slice asset_dynamics, _) = asset_dynamics_collection.udict_get?(256, asset_id);
~dump(112999);
	return unpack_asset_dynamics(asset_dynamics);
}

(cell, ()) asset_dynamics_collection:set_packed( ;; todo check token_balance
	cell asset_dynamics_collection, int asset_id,
	int price, int s_rate, int b_rate,
	int total_supply_principal, int total_borrow_principal,
	int last_accural, int token_balance
) {
	cell asset_dynamics = pack_asset_dynamics(
		price, s_rate, b_rate,
		total_supply_principal, total_borrow_principal,
		last_accural, token_balance
	);

	return (asset_dynamics_collection.udict_set(
		256, asset_id, asset_dynamics.begin_parse() 
	), ());
}

int asset_dynamics_collection:has?(
	cell asset_dynamics_collection, int asset_id
) {
	(_, int f) = asset_dynamics_collection.udict_get?(256, asset_id);
	return f;
}