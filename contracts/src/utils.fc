(int) mul_factor (int a, int b) {
  return (a * b);
}

(int) present_value_calc (int index, int principal_value) {
~dump(index);
~dump(principal_value);
~dump(constants::base_index_scale);
  return principal_value * index / constants::base_index_scale;
}

(int) principal_value_supply_calc (int s_rate, int present_value) {
  return present_value * constants::base_index_scale / s_rate;
}

(int) principal_value_borrow_calc (int b_rate, int present_value) {
  return (present_value * constants::base_index_scale + b_rate - 1) / b_rate;
}

(int) present_value(int s_rate, int b_rate, int principal_value) {
  if (principal_value >= 0) {
    return present_value_calc(s_rate, principal_value);
  } else {
    return - present_value_calc(b_rate, - principal_value);
  }
}

(int) principal_value(int s_rate, int b_rate, int present_value) {
  if (present_value >= 0) {
    return principal_value_supply_calc(s_rate, present_value);
  } else {
    return - principal_value_borrow_calc(b_rate, - present_value);
  }
}

(int, int) calc_supply_principals (int old_principal, int new_principal) {
  if (new_principal < old_principal) {
    return (0, 0);
  }
  if (new_principal <= 0) {
    return (new_principal - old_principal, 0);
  } else {
    if (old_principal >= 0) {
      return (0, new_principal - old_principal);
    } else {
      return (- old_principal, new_principal);
    }
  }
}

(int, int) calc_withdraw_principals (old_principal, new_principal) {
  if (new_principal > old_principal){
    return (0, 0);
  }
  if (new_principal >= 0){
    return (old_principal - new_principal, 0);
  } else {
    if (old_principal <= 0) {
      return (0, old_principal - new_principal);
    } else {
      return (old_principal, - new_principal);
    }
  }
}
