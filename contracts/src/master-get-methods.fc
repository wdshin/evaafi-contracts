(int) getCollateralQuote (slice borrow_token, slice collateral_token, int amount) method_id {
  (_, _, cell asset_config_collection, _, _, _, cell asset_dynamics_collection) = storage::load();
  return get_collateral_quote(asset_config_collection, asset_dynamics_collection, borrow_token, collateral_token, amount);
}

;; TODO@sepezho: is it supposed to return (s_rate and b_rate) or (supply_interest and borrow_interest)?
(int, int) getAssetRates (slice asset_address) method_id {
  (_, _, cell asset_config_collection, _, _, _, cell asset_dynamics_collection) = storage::load();
  var (s_rate, b_rate) = get_asset_rates(asset_config_collection, asset_dynamics_collection, asset_address); ;; TODO@sepezho: this is not s_rate and b_rate - don't use these names
  return (s_rate, b_rate);
}

slice calc_address (int addr_hash) inline {
	int wc = get_current_workchain();

  return begin_cell().store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(addr_hash, 256)
    .end_cell()
    .begin_parse();
}

;; TODO@sepezho: is it supposed to return a dict of (s_rate and b_rate) or of (supply_interest and borrow_interest)?
(cell) get_assets_rates () method_id {
  (cell meta, cell user_contract_code, cell asset_config_collection, int if_active, slice admin, cell wallet_to_master, cell asset_dynamics_collection) = storage::load();
  (int asset_address, slice asset_dynamics, int flag) = asset_dynamics_collection.udict_get_min?(256);
  cell rates = new_dict();
  while (flag) {
    var (s_rate, b_rate) = get_asset_rates(asset_config_collection, asset_dynamics_collection, calc_address(asset_address)); ;; TODO@sepezho: this is not s_rate and b_rate - don't use these names
    slice asset_rates = begin_cell().store_uint(s_rate, 64).store_uint(b_rate, 64).end_cell().begin_parse();
    rates~udict_set(256, asset_address, asset_rates); ;; todo tests
    (int asset_address, slice asset_dynamics, int flag) = asset_dynamics_collection.udict_get_next?(256, asset_address);
  }
  return (rates);
}

(int) getAssetReserves (slice asset_address) method_id {
  (_, _, _, _, _, _, cell asset_dynamics_collection) = storage::load();
  return get_asset_reserves(asset_dynamics_collection, asset_address);
}

(cell) get_assets_reserves () method_id {
  (cell meta, cell user_contract_code, cell asset_config_collection, int if_active, slice admin, cell wallet_to_master, cell asset_dynamics_collection) = storage::load();
  (int asset_address, slice asset_dynamics, int flag) = asset_dynamics_collection.udict_get_min?(256);
  cell reserves = new_dict();
  while (flag) {
    var reserve = get_asset_reserves(asset_dynamics_collection, calc_address(asset_address));
    slice asset_reserve = begin_cell().store_uint(reserve, 64).end_cell().begin_parse();
    reserves~udict_set(256, asset_address, asset_reserve); ;; todo tests
    (int asset_address, slice asset_dynamics, int flag) = asset_dynamics_collection.udict_get_next?(256, asset_address);
  }
  return (reserves);
}

(int, int) getAssetTotals (slice asset_address) method_id {
  (_, _, _, _, _, _, cell asset_dynamics_collection) = storage::load();
  var (s_rate, b_rate) = get_asset_totals(asset_dynamics_collection, asset_address);
  return (s_rate, b_rate);
}

(cell) getAssetsData () method_id {
  (cell meta, cell user_contract_code, cell asset_config_collection, int if_active, slice admin, cell wallet_to_master, cell asset_dynamics_collection) = storage::load();
  return (asset_dynamics_collection);
}

(cell) getConfig () method_id {
  ;;todo addd wallet_to_master to all storage functions calls
  (cell meta, cell user_contract_code, cell asset_config_collection, int if_active, slice admin, cell wallet_to_master, cell asset_dynamics_collection) = storage::load();
    
  cell config = begin_cell()
    .store_ref(meta) ;; meta_data 
    .store_ref(user_contract_code) ;; user_contract_code
    .store_ref(
      begin_cell()
        .store_ref(asset_config_collection) ;; asset_config_collection
        .store_uint(if_active, 8) ;; if_active
        .store_slice(admin) ;; admin_address
        .store_dict(wallet_to_master) ;; ?
      .end_cell())
    .end_cell();

  return (config);
}

(cell, cell, cell, cell, cell) getUIVariables () method_id {
  cell config = getConfig();
  cell asset_dynamics_collection = getAssetsData();
  cell assets_rates = get_assets_rates();
  cell assets_reserves = get_assets_reserves();
  return (asset_dynamics_collection, config, assets_rates, assets_rates, assets_reserves);
}

(int) test () method_id {
  return (1);
}
