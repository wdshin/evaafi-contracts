#include "imports/stdlib.fc";

global int n;
global int a;
global int b;

(int) addmod(int x, int y, int k){
  return ((x + y) % k);
}

(int) mulmod(int x, int y, int k){
  return ((x * y) % k);
}

(int) inverse (int num) {
  int t = 0;
  int newT = 1;
  int r = n;
  int newR = num;
  int q = 0;
  while (~(newR == 0)){
    q = r / newR;
    (t, newT) = (newT, addmod(t, (n - mulmod(q, newT,n)), n));
    (r, newR) = (newR, r - q * newR );
  }
  return t;
}

(int, int, int) toProjectivePoint(int x0, int y0) {
  int z1 = addmod(0, 1, n);
  int x1 = mulmod(x0, z1, n);
  int y1 = mulmod(y0, z1, n);
  return (x1, y1, z1);
}

(int, int) toAffinePoint(int x0, int y0, int z0) {
  int z0Inv = inverse(z0);
  int x1 = mulmod(x0, z0Inv, n);
  int y1 = mulmod(y0, z0Inv, n);
  return (x1, y1);
}

(int, int, int) zeroProj () {
  return (0, 0, 1);
}

(int, int) zeroAffine () {
  return (0, 0);
}

(int) isZeroCurve (x0, y0){
  if ((x0 == 0) & (y0 == 0)){
    return 1;
  }
  return 0;
}

(int, int, int) twiceProj (int x0, int y0, int z0) {
  int t = 0;
  int u = 0;
  int v = 0;
  int w = 0;
  if (isZeroCurve(x0, y0) == 1){
    return zeroProj();
  }
  
  u = mulmod(y0, z0, n);
  u = mulmod(u, 2, n);
  
  v = mulmod(u, x0, n);
  v = mulmod(v, y0, n);
  v = mulmod(v, 2, n);
  
  x0 = mulmod(x0, x0, n);
  t = mulmod(x0, 3, n);
  z0 = mulmod(z0, z0, n);
  z0 = mulmod(z0, a, n);
  t = addmod(t, z0, n);
  
  w = mulmod(t, t, n);
  x0 = mulmod(2, v, n);
  w = addmod(w, n - x0, n);
  
  x0 = addmod(v, n - w, n);
  x0 = mulmod(t, x0, n);
  y0 = mulmod(y0, u, n);
  y0 = mulmod(y0, y0, n);
  y0 = mulmod(2, y0, n);
  int y1 = addmod(x0, n - y0, n);
  
  int x1 = mulmod(u, w, n);
  
  int z1 = mulmod(u, u, n);
  z1 = mulmod(z1, u, n);
  return (x1, y1, z1);
}

(int, int, int) addProj2 (int v, int u0, int u1, int t1, int t0) {
  int u = 0;
  int u2 = 0;
  int u3 = 0;
  int w = 0;
  int t = 0;

  t = addmod(t0, n - t1, n);
  u = addmod(u0, n - u1, n);
  u2 = mulmod(u, u, n);

  w = mulmod(t, t, n);
  w = mulmod(w, v, n);
  u1 = addmod(u1, u0, n);
  u1 = mulmod(u1, u2, n);
  w = addmod(w, n - u1, n);
  
  int x2 = mulmod(u, w, n);

  u3 = mulmod(u2, u, n);
  u0 = mulmod(u0, u2, n);
  u0 = addmod(u0, n - w, n);
  t = mulmod(t, u0, n);
  t0 = mulmod(t0, u3, n);

  int y2 = addmod(t, n - t0, n);

  int z2 = mulmod(u3, v, n);
  return (x2, y2, z2);
}

(int, int, int) addProj (int x0, int y0, int z0, int x1, int y1, int z1) {
  int t0 = 0;
  int t1 = 0;
  int u0 = 0;
  int u1 = 0;
  if (isZeroCurve(x0, y0) == 1) {
    return (x1, y1, z1);
  }

  if (isZeroCurve(x1, y1) == 1) {
    return (x0, y0, z0);
  }

  
  t0 = mulmod(y0, z1, n);
  t1 = mulmod(y1, z0, n);
  
  u0 = mulmod(x0, z1, n);
  u1 = mulmod(x1, z0, n);
  if (u0 == u1) {
    if (t0 == t1) {
      return twiceProj(x0, y0, z0);
    }
    return zeroProj();
  }
 
  (int x2, int y2, int z2) = addProj2(mulmod(z0, z1, n), u0, u1, t1, t0);
  return (x2, y2, z2);
}

(int, int) add (int x0, int y0, int x1, int y1) {
  int z0 = 0;
  (x0, y0, z0) = addProj(x0, y0, 1, x1, y1, 1);
  return toAffinePoint(x0, y0, z0);
}

(int, int) twice (int x0, int y0) {
  int z0 = 0;
  (x0, y0, z0) = twiceProj(x0, y0, 1);
  return toAffinePoint(x0, y0, z0);
}

(int, int) multiplyPowerBase2 (int x0, int y0, int exp) {
  int base2X = x0;
  int base2Y = y0;
  int base2Z = 1;
  int i = 0;
  
  while (i < exp){
    (base2X, base2Y, base2Z) = twiceProj(base2X, base2Y, base2Z);
    i += 1;
  }
  
  return toAffinePoint(base2X, base2Y, base2Z);
}

(int, int) multiplyScalar(int x0, int y0, int scalar) {
  int z1 = 0;

  if(scalar == 0) {
    return zeroAffine();
  }
  
  if (scalar == 1) {
    return (x0, y0);
  }
  
  if (scalar == 2) {
    return twice(x0, y0);
  }

  int base2X = x0;
  int base2Y = y0;
  int base2Z = 1;

  int x1 = x0;
  int y1 = y0;

  if((scalar % 2) == 0) {
      x1 = 0;
      y1 = 0;
  }
 
  scalar = scalar / 2;
 
  while(scalar > 0) {
    (base2X, base2Y, base2Z) = twiceProj(base2X, base2Y, base2Z);

    if((scalar % 2) == 1) {
      (x1, y1, z1) = addProj(base2X, base2Y, base2Z, x1, y1, z1);
    }

    scalar = scalar / 2;
  }

  return toAffinePoint(x1, y1, z1);
}

() recv_internal () {
  n = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD47;
  a = 0;
  b = 3;
  ;; TODO tests thrue flags here
}
